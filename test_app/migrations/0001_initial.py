# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-06-14 16:31
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BotometerScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('api_version', models.FloatField(null=True)),
                ('botometer_content', models.FloatField(null=True)),
                ('botometer_friend', models.FloatField(null=True)),
                ('botometer_network', models.FloatField(null=True)),
                ('botometer_sentiment', models.FloatField(null=True)),
                ('botometer_temporal', models.FloatField(null=True)),
                ('botometer_user', models.FloatField(null=True)),
                ('botometer_scores_english', models.FloatField(null=True)),
                ('botometer_scores_universal', models.FloatField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalTweet',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('twitter_id', models.CharField(db_index=True, max_length=150)),
                ('last_update_time', models.DateTimeField(blank=True, editable=False)),
                ('historical', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(help_text=b'The time/date that the tweet was published', null=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=400), default=[], help_text=b'Links contained in the tweet', null=True, size=None)),
                ('in_reply_to_screen_name', models.CharField(max_length=255, null=True)),
                ('in_reply_to_status_id', models.CharField(max_length=255, null=True)),
                ('in_reply_to_user_id', models.CharField(max_length=255, null=True)),
                ('language', models.CharField(max_length=255, null=True)),
                ('quoted_status_id', models.CharField(max_length=255, null=True)),
                ('text', models.CharField(max_length=1024, null=True)),
                ('retweeted', models.NullBooleanField()),
                ('favorited', models.NullBooleanField()),
                ('retweet_count', models.IntegerField(null=True)),
                ('favorite_count', models.IntegerField(null=True)),
                ('json', picklefield.fields.PickledObjectField(editable=False, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical tweet',
            },
        ),
        migrations.CreateModel(
            name='HistoricalTwitterProfile',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('twitter_id', models.CharField(db_index=True, max_length=150)),
                ('last_update_time', models.DateTimeField(blank=True, editable=False)),
                ('historical', models.BooleanField(default=False)),
                ('tweet_backfilled', models.BooleanField(default=False, help_text=b"An indicator used in the sync_tweets management function; True indicates that the user's         tweet history has been backfilled as far as possible, so the sync function will stop after it hits an existing         tweet the next time it runs.")),
                ('screen_name', models.CharField(db_index=True, help_text=b'Twitter screen name', max_length=100, null=True)),
                ('name', models.CharField(max_length=200, null=True)),
                ('description', models.TextField(null=True)),
                ('status', models.TextField(null=True)),
                ('urls', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=300), default=[], size=None)),
                ('contributors_enabled', models.NullBooleanField()),
                ('is_verified', models.NullBooleanField()),
                ('created_at', models.DateTimeField(null=True)),
                ('profile_image_url', models.TextField(null=True)),
                ('geo_enabled', models.NullBooleanField()),
                ('location', models.CharField(max_length=512, null=True)),
                ('language', models.CharField(max_length=255, null=True)),
                ('time_zone', models.CharField(max_length=255, null=True)),
                ('utc_offset', models.CharField(max_length=255, null=True)),
                ('favorites_count', models.IntegerField(null=True)),
                ('followers_count', models.IntegerField(null=True)),
                ('friends_count', models.IntegerField(null=True)),
                ('listed_count', models.IntegerField(null=True)),
                ('statuses_count', models.IntegerField(null=True)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(default=dict, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical twitter profile',
            },
        ),
        migrations.CreateModel(
            name='Politician',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Tweet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('twitter_id', models.CharField(db_index=True, max_length=150)),
                ('last_update_time', models.DateTimeField(auto_now=True)),
                ('historical', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(help_text=b'The time/date that the tweet was published', null=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=400), default=[], help_text=b'Links contained in the tweet', null=True, size=None)),
                ('in_reply_to_screen_name', models.CharField(max_length=255, null=True)),
                ('in_reply_to_status_id', models.CharField(max_length=255, null=True)),
                ('in_reply_to_user_id', models.CharField(max_length=255, null=True)),
                ('language', models.CharField(max_length=255, null=True)),
                ('quoted_status_id', models.CharField(max_length=255, null=True)),
                ('text', models.CharField(max_length=1024, null=True)),
                ('retweeted', models.NullBooleanField()),
                ('favorited', models.NullBooleanField()),
                ('retweet_count', models.IntegerField(null=True)),
                ('favorite_count', models.IntegerField(null=True)),
                ('json', picklefield.fields.PickledObjectField(editable=False, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TweetSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('tweets', models.ManyToManyField(related_name='tweet_sets', to='test_app.Tweet')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TwitterHashtag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TwitterPlace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('twitter_id', models.CharField(db_index=True, max_length=150)),
                ('last_update_time', models.DateTimeField(auto_now=True)),
                ('historical', models.BooleanField(default=False)),
                ('full_name', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('place_type', models.CharField(max_length=255)),
                ('country_code', models.CharField(max_length=10)),
                ('country', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TwitterProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('twitter_id', models.CharField(db_index=True, max_length=150)),
                ('last_update_time', models.DateTimeField(auto_now=True)),
                ('historical', models.BooleanField(default=False)),
                ('tweet_backfilled', models.BooleanField(default=False, help_text=b"An indicator used in the sync_tweets management function; True indicates that the user's         tweet history has been backfilled as far as possible, so the sync function will stop after it hits an existing         tweet the next time it runs.")),
                ('screen_name', models.CharField(db_index=True, help_text=b'Twitter screen name', max_length=100, null=True)),
                ('name', models.CharField(max_length=200, null=True)),
                ('description', models.TextField(null=True)),
                ('status', models.TextField(null=True)),
                ('urls', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=300), default=[], size=None)),
                ('contributors_enabled', models.NullBooleanField()),
                ('is_verified', models.NullBooleanField()),
                ('created_at', models.DateTimeField(null=True)),
                ('profile_image_url', models.TextField(null=True)),
                ('geo_enabled', models.NullBooleanField()),
                ('location', models.CharField(max_length=512, null=True)),
                ('language', models.CharField(max_length=255, null=True)),
                ('time_zone', models.CharField(max_length=255, null=True)),
                ('utc_offset', models.CharField(max_length=255, null=True)),
                ('favorites_count', models.IntegerField(null=True)),
                ('followers_count', models.IntegerField(null=True)),
                ('friends_count', models.IntegerField(null=True)),
                ('listed_count', models.IntegerField(null=True)),
                ('statuses_count', models.IntegerField(null=True)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(default=dict, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TwitterRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dates', django.contrib.postgres.fields.ArrayField(base_field=models.DateField(), default=[], size=None)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend_details', to='test_app.TwitterProfile')),
                ('friend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower_details', to='test_app.TwitterProfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='twitterprofile',
            name='followers',
            field=models.ManyToManyField(related_name='friends', through='test_app.TwitterRelationship', to='test_app.TwitterProfile'),
        ),
        migrations.AddField(
            model_name='twitterprofile',
            name='politician',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='twitter_profiles', to='test_app.Politician'),
        ),
        migrations.AddField(
            model_name='tweet',
            name='place',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tweets', to='test_app.TwitterPlace'),
        ),
        migrations.AddField(
            model_name='tweet',
            name='profile',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tweets', to='test_app.TwitterProfile'),
        ),
        migrations.AddField(
            model_name='tweet',
            name='tweet_mentions',
            field=models.ManyToManyField(related_name='user_mentions', to='test_app.TwitterProfile'),
        ),
        migrations.AddField(
            model_name='tweet',
            name='tweets',
            field=models.ManyToManyField(related_name='hashtags', to='test_app.TwitterHashtag'),
        ),
        migrations.AddField(
            model_name='historicaltwitterprofile',
            name='politician',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='test_app.Politician'),
        ),
        migrations.AddField(
            model_name='historicaltweet',
            name='place',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='test_app.TwitterPlace'),
        ),
        migrations.AddField(
            model_name='historicaltweet',
            name='profile',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='test_app.TwitterProfile'),
        ),
        migrations.AddField(
            model_name='botometerscore',
            name='profile',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='botometer_scores', to='test_app.TwitterProfile'),
        ),
    ]
