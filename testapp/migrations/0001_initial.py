# Generated by Django 3.1.2 on 2021-11-16 11:22

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Tweet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('twitter_id', models.CharField(db_index=True, max_length=150, unique=True)),
                ('last_update_time', models.DateTimeField(auto_now=True)),
                ('historical', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(help_text='The time/date that the tweet was published', null=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=400), help_text='Links contained in the tweet', null=True, size=None)),
                ('media', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(null=True), help_text='Media contained in the tweet', null=True, size=None)),
                ('text', models.CharField(max_length=1500, null=True)),
                ('profile_mentions_raw', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=280), default=list, null=True, size=None)),
                ('language', models.CharField(max_length=255, null=True)),
                ('retweet_count', models.IntegerField(null=True)),
                ('favorite_count', models.IntegerField(null=True)),
                ('json', models.JSONField(default=dict, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TwitterHashtag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TwitterProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('twitter_id', models.CharField(db_index=True, max_length=150, unique=True)),
                ('last_update_time', models.DateTimeField(auto_now=True)),
                ('historical', models.BooleanField(default=False)),
                ('tweet_backfilled', models.BooleanField(default=False, help_text="An indicator used in the sync_tweets management function; True indicates that the profile's         tweet history has been backfilled as far as possible, so the sync function will stop after it hits an existing         tweet the next time it runs.")),
                ('screen_name', models.CharField(db_index=True, help_text='Twitter screen name', max_length=100, null=True)),
                ('created_at', models.DateTimeField(null=True)),
                ('twitter_error_code', models.IntegerField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TwitterProfileSnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('twitter_id', models.CharField(db_index=True, max_length=150, unique=True)),
                ('last_update_time', models.DateTimeField(auto_now=True)),
                ('historical', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('screen_name', models.CharField(db_index=True, help_text='Twitter screen name', max_length=100, null=True)),
                ('name', models.CharField(max_length=200, null=True)),
                ('contributors_enabled', models.BooleanField(null=True)),
                ('description', models.TextField(null=True)),
                ('favorites_count', models.IntegerField(null=True)),
                ('followers_count', models.IntegerField(null=True)),
                ('followings_count', models.IntegerField(null=True)),
                ('is_verified', models.BooleanField(null=True)),
                ('is_protected', models.BooleanField(null=True)),
                ('listed_count', models.IntegerField(null=True)),
                ('profile_image_url', models.TextField(null=True)),
                ('status', models.TextField(null=True)),
                ('statuses_count', models.IntegerField(null=True)),
                ('urls', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=300), default=list, size=None)),
                ('location', models.CharField(max_length=512, null=True)),
                ('json', models.JSONField(default=dict, null=True)),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='snapshots', to='testapp.twitterprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TwitterProfileSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('profiles', models.ManyToManyField(related_name='twitter_profile_sets', to='testapp.TwitterProfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='twitterprofile',
            name='most_recent_snapshot',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='testapp.twitterprofilesnapshot'),
        ),
        migrations.AddField(
            model_name='twitterprofile',
            name='organization',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='twitter_profiles', to='testapp.organization'),
        ),
        migrations.AddField(
            model_name='twitterprofile',
            name='person',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='twitter_profiles', to='testapp.person'),
        ),
        migrations.CreateModel(
            name='TwitterFollowingList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('finish_time', models.DateTimeField(null=True)),
                ('followings', models.ManyToManyField(to='testapp.TwitterProfile')),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='following_lists', to='testapp.twitterprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TwitterFollowerList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('finish_time', models.DateTimeField(null=True)),
                ('followers', models.ManyToManyField(to='testapp.TwitterProfile')),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='follower_lists', to='testapp.twitterprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TweetSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('tweets', models.ManyToManyField(related_name='tweet_sets', to='testapp.Tweet')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='tweet',
            name='hashtags',
            field=models.ManyToManyField(related_name='tweets', to='testapp.TwitterHashtag'),
        ),
        migrations.AddField(
            model_name='tweet',
            name='in_reply_to_status',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='testapp.tweet'),
        ),
        migrations.AddField(
            model_name='tweet',
            name='profile',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tweets', to='testapp.twitterprofile'),
        ),
        migrations.AddField(
            model_name='tweet',
            name='profile_mentions',
            field=models.ManyToManyField(related_name='tweet_mentions', to='testapp.TwitterProfile'),
        ),
        migrations.AddField(
            model_name='tweet',
            name='quoted_status',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quotes', to='testapp.tweet'),
        ),
        migrations.AddField(
            model_name='tweet',
            name='retweeted_status',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='retweets', to='testapp.tweet'),
        ),
        migrations.CreateModel(
            name='HistoricalTwitterProfileSnapshot',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('twitter_id', models.CharField(db_index=True, max_length=150)),
                ('last_update_time', models.DateTimeField(blank=True, editable=False)),
                ('historical', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(blank=True, editable=False)),
                ('screen_name', models.CharField(db_index=True, help_text='Twitter screen name', max_length=100, null=True)),
                ('name', models.CharField(max_length=200, null=True)),
                ('contributors_enabled', models.BooleanField(null=True)),
                ('description', models.TextField(null=True)),
                ('favorites_count', models.IntegerField(null=True)),
                ('followers_count', models.IntegerField(null=True)),
                ('followings_count', models.IntegerField(null=True)),
                ('is_verified', models.BooleanField(null=True)),
                ('is_protected', models.BooleanField(null=True)),
                ('listed_count', models.IntegerField(null=True)),
                ('profile_image_url', models.TextField(null=True)),
                ('status', models.TextField(null=True)),
                ('statuses_count', models.IntegerField(null=True)),
                ('urls', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=300), default=list, size=None)),
                ('location', models.CharField(max_length=512, null=True)),
                ('json', models.JSONField(default=dict, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('profile', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='testapp.twitterprofile')),
            ],
            options={
                'verbose_name': 'historical twitter profile snapshot',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTwitterProfile',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('twitter_id', models.CharField(db_index=True, max_length=150)),
                ('last_update_time', models.DateTimeField(blank=True, editable=False)),
                ('historical', models.BooleanField(default=False)),
                ('tweet_backfilled', models.BooleanField(default=False, help_text="An indicator used in the sync_tweets management function; True indicates that the profile's         tweet history has been backfilled as far as possible, so the sync function will stop after it hits an existing         tweet the next time it runs.")),
                ('screen_name', models.CharField(db_index=True, help_text='Twitter screen name', max_length=100, null=True)),
                ('created_at', models.DateTimeField(null=True)),
                ('twitter_error_code', models.IntegerField(null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('most_recent_snapshot', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='testapp.twitterprofilesnapshot')),
                ('organization', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='testapp.organization')),
                ('person', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='testapp.person')),
            ],
            options={
                'verbose_name': 'historical twitter profile',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTweet',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('twitter_id', models.CharField(db_index=True, max_length=150)),
                ('last_update_time', models.DateTimeField(blank=True, editable=False)),
                ('historical', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(help_text='The time/date that the tweet was published', null=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=400), help_text='Links contained in the tweet', null=True, size=None)),
                ('media', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(null=True), help_text='Media contained in the tweet', null=True, size=None)),
                ('text', models.CharField(max_length=1500, null=True)),
                ('profile_mentions_raw', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=280), default=list, null=True, size=None)),
                ('language', models.CharField(max_length=255, null=True)),
                ('retweet_count', models.IntegerField(null=True)),
                ('favorite_count', models.IntegerField(null=True)),
                ('json', models.JSONField(default=dict, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('in_reply_to_status', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='testapp.tweet')),
                ('profile', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='testapp.twitterprofile')),
                ('quoted_status', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='testapp.tweet')),
                ('retweeted_status', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='testapp.tweet')),
            ],
            options={
                'verbose_name': 'historical tweet',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
