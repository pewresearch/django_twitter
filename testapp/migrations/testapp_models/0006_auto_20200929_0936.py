# Generated by Django 3.0.2 on 2020-09-29 09:10

import django.contrib.postgres.fields
import traceback
from django.db import migrations, models
from tqdm import tqdm
from pewtils import is_not_null


def populate_media(apps, schema_editor):

    from django_twitter.utils import get_concrete_model
    import pandas as pd

    # During migrations, Django creates "fake" versions of the models that are accessible via apps
    # So we need to look up the models in our app, and then grab the fake migration-based versions via apps
    TweetModel = None
    model = get_concrete_model("AbstractTweet")
    if model:
        TweetModel = apps.get_model(model._meta.app_label, model._meta.model_name)

    for tweet in tqdm(TweetModel.objects.exclude(json={}).exclude(json__isnull=True),
                        desc="Extracting media links from tweets"):
        media = []
        for m in tweet.json.get("extended_entities", {}).get("media", []):
            try:
                if m['type'] == 'video':
                    element = {"url": None, "bitrate": None, "type": None, "duration": None, "aspect_ratio": None}
                    if 'aspect_ratio' in m['video_info']:
                        element['aspect_ratio'] = ':'.join([str(a) for a in m['video_info']['aspect_ratio']])
                    if 'duration_millis' in m['video_info']:
                        element['duration'] = m['video_info']['duration_millis']
                    v = sorted(m['video_info']['variants'], key=lambda x: x['bitrate'] if 'bitrate' in x else 0,
                               reverse=True)[0]
                    element['url'] = v['url']
                    element['bitrate'] = v['bitrate']
                    element['type'] = v['content_type']

                else:
                    element = {"url": m['media_url_https']}
                    element['width'] = m['sizes']['large']['w']
                    element['height'] = m['sizes']['large']['h']
                    element['type'] = 'image/gif' if m['type'] == 'animated_gif' else 'image'

            except:
                print(traceback.format_exc())
                element = m

            media.append(element)

        tweet.media = list(media)
        tweet.save()


class Migration(migrations.Migration):

    dependencies = [
        ('testapp', '0005_auto_20200922_1146'),
    ]

    operations = [
        migrations.AddField(
            model_name='historicaltweet',
            name='media',
            field=django.contrib.postgres.fields.ArrayField(
                base_field=django.contrib.postgres.fields.jsonb.JSONField(null=True),
                help_text='Media contained in the tweet', null=True, size=None),
        ),
        migrations.AddField(
            model_name='tweet',
            name='media',
            field=django.contrib.postgres.fields.ArrayField(
                base_field=django.contrib.postgres.fields.jsonb.JSONField(null=True),
                help_text='Media contained in the tweet', null=True, size=None),
        ),
        migrations.RunPython(populate_media, migrations.RunPython.noop),
    ]